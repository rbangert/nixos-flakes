"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkEvent = void 0;
const getDateRangeFromCasualRegexMatch_1 = require("../dateRange/getDateRangeFromCasualRegexMatch");
const getDateRangeFromEDTFRegexMatch_1 = require("../dateRange/getDateRangeFromEDTFRegexMatch");
const regex_1 = require("../regex");
const Types_1 = require("../Types");
const checkComments_1 = require("./checkComments");
const checkListItems_1 = require("./checkListItems");
const Node_1 = require("../Node");
const checkTags_1 = require("./checkTags");
function checkEvent(line, lines, i, lengthAtIndex, context, cache) {
    let dateRange = (0, getDateRangeFromEDTFRegexMatch_1.getDateRangeFromEDTFRegexMatch)(line, i, lengthAtIndex, context, cache);
    if (!dateRange) {
        dateRange = (0, getDateRangeFromCasualRegexMatch_1.getDateRangeFromCasualRegexMatch)(line, i, lengthAtIndex, context, cache);
    }
    if (!dateRange) {
        return i;
    }
    const eventDuration = +dateRange.toDateTime - +dateRange.fromDateTime;
    if (typeof context.maxDuration === "undefined" ||
        eventDuration > context.maxDuration) {
        context.maxDuration = eventDuration;
    }
    let end = i;
    let nextLine;
    const matchedListItems = [];
    while (true) {
        nextLine = lines[++end];
        if (typeof nextLine !== "string" ||
            nextLine.match(regex_1.EDTF_START_REGEX) ||
            nextLine.match(regex_1.EVENT_START_REGEX) ||
            nextLine.match(regex_1.GROUP_START_REGEX) ||
            nextLine.match(regex_1.PAGE_BREAK_REGEX) ||
            (context.currentPath.length > 1 && nextLine.match(regex_1.GROUP_END_REGEX))) {
            break;
        }
        (0, checkComments_1.checkComments)(nextLine, end, lengthAtIndex, context);
        (0, checkTags_1.checkTags)(nextLine, end, lengthAtIndex, context);
        const listItems = (0, checkListItems_1.checkListItems)(nextLine, end, lengthAtIndex, context);
        if (listItems) {
            matchedListItems.push(...listItems);
        }
    }
    const eventGroup = lines.slice(i, end);
    const eventRange = {
        from: dateRange.dateRangeInText.from,
        to: lengthAtIndex[end],
        type: Types_1.RangeType.Event,
        lineFrom: {
            line: dateRange.dateRangeInText.lineFrom.line,
            index: dateRange.dateRangeInText.lineFrom.index,
        },
        lineTo: {
            line: i,
            index: line.length,
        },
    };
    const completionMatch = dateRange.eventText.match(regex_1.COMPLETION_REGEX);
    const indexOfEventText = line.indexOf(dateRange.eventText);
    let completed = undefined;
    if (completionMatch) {
        const from = indexOfEventText + dateRange.eventText.indexOf(completionMatch[0]);
        const to = from +
            dateRange.eventText.indexOf(completionMatch[1]) +
            completionMatch[1].length;
        completed = ["X", "x"].some((x) => completionMatch.includes(x));
        const indicator = {
            type: Types_1.RangeType.CheckboxItemIndicator,
            from: dateRange.dateRangeInText.from + from,
            to: dateRange.dateRangeInText.from + to,
            lineFrom: {
                line: dateRange.dateRangeInText.lineFrom.line,
                index: from,
            },
            lineTo: {
                line: dateRange.dateRangeInText.lineFrom.line,
                index: to,
            },
            content: completed,
        };
        context.ranges.push(indicator);
    }
    eventGroup[0] = dateRange.eventText.trim();
    const eventDescription = new Types_1.EventDescription(eventGroup, matchedListItems, completed);
    const event = new Types_1.Event(line, dateRange, eventRange, dateRange.dateRangeInText, eventDescription, dateRange.originalString);
    if (event) {
        context.push(new Node_1.Node(event));
        if (event.eventDescription.id && !context.ids[event.eventDescription.id]) {
            context.ids[event.eventDescription.id] = event;
        }
        if (!context.earliest || dateRange.fromDateTime < context.earliest) {
            context.earliest = dateRange.fromDateTime;
        }
        if (!context.latest || dateRange.toDateTime > context.latest) {
            context.latest = dateRange.toDateTime;
        }
    }
    return end - 1;
}
exports.checkEvent = checkEvent;
