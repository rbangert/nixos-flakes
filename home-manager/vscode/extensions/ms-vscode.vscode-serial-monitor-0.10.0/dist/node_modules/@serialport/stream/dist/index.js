"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.SerialPortStream=exports.DisconnectedError=void 0;const stream_1=require("stream"),debug_1=__importDefault(require("debug")),debug=(0,debug_1.default)("serialport/stream");class DisconnectedError extends Error{constructor(e){super(e),this.disconnected=!0}}exports.DisconnectedError=DisconnectedError;const defaultSetFlags={brk:!1,cts:!1,dtr:!0,rts:!0};function allocNewReadPool(e){const t=Buffer.allocUnsafe(e);return t.used=0,t}class SerialPortStream extends stream_1.Duplex{constructor(e,t){const i={autoOpen:!0,endOnClose:!1,highWaterMark:65536,...e};if(super({highWaterMark:i.highWaterMark}),!i.binding)throw new TypeError('"Bindings" is invalid pass it as `options.binding`');if(!i.path)throw new TypeError(`"path" is not defined: ${i.path}`);if("number"!=typeof i.baudRate)throw new TypeError(`"baudRate" must be a number: ${i.baudRate}`);this.settings=i,this.opening=!1,this.closing=!1,this._pool=allocNewReadPool(this.settings.highWaterMark),this._kMinPoolSpace=128,this.settings.autoOpen&&this.open(t)}get path(){return this.settings.path}get baudRate(){return this.settings.baudRate}get isOpen(){var e,t;return null!==(t=null===(e=this.port)||void 0===e?void 0:e.isOpen)&&void 0!==t&&t&&!this.closing}_error(e,t){t?t.call(this,e):this.emit("error",e)}_asyncError(e,t){process.nextTick((()=>this._error(e,t)))}open(e){if(this.isOpen)return this._asyncError(new Error("Port is already open"),e);if(this.opening)return this._asyncError(new Error("Port is opening"),e);const{highWaterMark:t,binding:i,autoOpen:r,endOnClose:n,...s}=this.settings;this.opening=!0,debug("opening",`path: ${this.path}`),this.settings.binding.open(s).then((t=>{debug("opened",`path: ${this.path}`),this.port=t,this.opening=!1,this.emit("open"),e&&e.call(this,null)}),(t=>{this.opening=!1,debug("Binding #open had an error",t),this._error(t,e)}))}update(e,t){if(!this.isOpen||!this.port)return debug("update attempted, but port is not open"),this._asyncError(new Error("Port is not open"),t);debug("update",`baudRate: ${e.baudRate}`),this.port.update(e).then((()=>{debug("binding.update","finished"),this.settings.baudRate=e.baudRate,t&&t.call(this,null)}),(e=>(debug("binding.update","error",e),this._error(e,t))))}write(e,t,i){return Array.isArray(e)&&(e=Buffer.from(e)),"function"==typeof t?super.write(e,t):super.write(e,t,i)}_write(e,t,i){this.isOpen&&this.port?(debug("_write",`${e.length} bytes of data`),this.port.write(e).then((()=>{debug("binding.write","write finished"),i(null)}),(e=>{debug("binding.write","error",e),e.canceled||this._disconnected(e),i(e)}))):this.once("open",(()=>{this._write(e,t,i)}))}_writev(e,t){debug("_writev",`${e.length} chunks of data`);const i=e.map((e=>e.chunk));this._write(Buffer.concat(i),void 0,t)}_read(e){if(!this.isOpen||!this.port)return debug("_read","queueing _read for after open"),void this.once("open",(()=>{this._read(e)}));(!this._pool||this._pool.length-this._pool.used<this._kMinPoolSpace)&&(debug("_read","discarding the read buffer pool because it is below kMinPoolSpace"),this._pool=allocNewReadPool(this.settings.highWaterMark));const t=this._pool,i=Math.min(t.length-t.used,e),r=t.used;debug("_read","reading",{start:r,toRead:i}),this.port.read(t,r,i).then((({bytesRead:e})=>{if(debug("binding.read","finished",{bytesRead:e}),0===e)return debug("binding.read","Zero bytes read closing readable stream"),void this.push(null);t.used+=e,this.push(t.slice(r,r+e))}),(t=>{debug("binding.read","error",t),t.canceled||this._disconnected(t),this._read(e)}))}_disconnected(e){this.isOpen?(debug("disconnected",e),this.close(void 0,new DisconnectedError(e.message))):debug("disconnected aborted because already closed",e)}close(e,t=null){if(!this.isOpen||!this.port)return debug("close attempted, but port is not open"),this._asyncError(new Error("Port is not open"),e);this.closing=!0,debug("#close"),this.port.close().then((()=>{this.closing=!1,debug("binding.close","finished"),this.emit("close",t),this.settings.endOnClose&&this.emit("end"),e&&e.call(this,t)}),(t=>(this.closing=!1,debug("binding.close","had an error",t),this._error(t,e))))}set(e,t){if(!this.isOpen||!this.port)return debug("set attempted, but port is not open"),this._asyncError(new Error("Port is not open"),t);const i={...defaultSetFlags,...e};debug("#set",i),this.port.set(i).then((()=>{debug("binding.set","finished"),t&&t.call(this,null)}),(e=>(debug("binding.set","had an error",e),this._error(e,t))))}get(e){if(!this.isOpen||!this.port)return debug("get attempted, but port is not open"),this._asyncError(new Error("Port is not open"),e);debug("#get"),this.port.get().then((t=>{debug("binding.get","finished"),e.call(this,null,t)}),(t=>(debug("binding.get","had an error",t),this._error(t,e))))}flush(e){if(!this.isOpen||!this.port)return debug("flush attempted, but port is not open"),this._asyncError(new Error("Port is not open"),e);debug("#flush"),this.port.flush().then((()=>{debug("binding.flush","finished"),e&&e.call(this,null)}),(t=>(debug("binding.flush","had an error",t),this._error(t,e))))}drain(e){if(debug("drain"),!this.isOpen||!this.port)return debug("drain queuing on port open"),void this.once("open",(()=>{this.drain(e)}));this.port.drain().then((()=>{debug("binding.drain","finished"),e&&e.call(this,null)}),(t=>(debug("binding.drain","had an error",t),this._error(t,e))))}}exports.SerialPortStream=SerialPortStream;
// SIG // Begin signature block
// SIG // MIInpgYJKoZIhvcNAQcCoIInlzCCJ5MCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // l9gO9dSGJj/RlrWDBz3e5NRiUaR4YEETZnYVRmUbF7ag
// SIG // gg2LMIIGCTCCA/GgAwIBAgITMwAAAvJGWactZ6NLuAAA
// SIG // AAAC8jANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIyMDYzMDE3MzgyMVoX
// SIG // DTIzMDkxNTE3MzgyMVowgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCAzcmQgUGFydHkg
// SIG // QXBwbGljYXRpb24gQ29tcG9uZW50MIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2LxvZ9ZsJ/EAoXMi
// SIG // OI9tw70kKlV1+JZ4oPGYkDnuCvmbXtJTdt9JH/c70V94
// SIG // SnI5VzJ1ySyxbopznLabZqDYEC7kZVi+10R2jqGissu2
// SIG // 9XvSuMSkzpA5GXXYDGK5Nbj7m6y9wNS7OomCmyo1+C0y
// SIG // mmw/b9JGwg0X5PAS0TP7jQFRi3tvOf1X7HTner+1kptN
// SIG // fKLEEDFT/xu92fZlflEIyXBnW1plgDBEqCrylxp+VEMh
// SIG // zwrljJpqwQafnKd04YHMDj3Q+L/oGQCXUeRV9ZNdRWl0
// SIG // A8DJmC9OVYmLgCD2c7zqZ7gPKwBY8DkMysKu7DB8uIPc
// SIG // foWIvYxxB17pPcvc7QIDAQABo4IBczCCAW8wHwYDVR0l
// SIG // BBgwFgYKKwYBBAGCN0wRAQYIKwYBBQUHAwMwHQYDVR0O
// SIG // BBYEFOnSIj2aLawEUoblQMMiKgmshi/VMEUGA1UdEQQ+
// SIG // MDykOjA4MR4wHAYDVQQLExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xFjAUBgNVBAUTDTIzMTUyMis0NzEzMzUwHwYD
// SIG // VR0jBBgwFoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYD
// SIG // VR0fBE0wSzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tL3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAx
// SIG // MV8yMDExLTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMw
// SIG // UQYIKwYBBQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0
// SIG // LmNvbS9wa2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAx
// SIG // MV8yMDExLTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAyJwC9Uu4aRyhcH/tCpVOn
// SIG // PZKT/iMzk1uEVymttSTd8Rr9GTIgAmR4UVybP9lnwvhx
// SIG // rpKtVyFW1YpbXubVrcDtKlhean+AZf0HAN7ZsYG0kgeb
// SIG // 5gayll8YE7vNjak3zNB/IyR3ZAwnP8reNttvL6WOnoPC
// SIG // L2g/2EcNjsx2a8HFHH9a71v7PfAO8Pjp/vYzBzTt0UhR
// SIG // wQlA0bjjRdAgZxExkW1zbzrnWAa0uyephq/2OQsmO2rR
// SIG // IAXRhpc9R9531uiSXHaYMyrmFt0Izmxy1wPvCfjaVTzE
// SIG // WBgeLTazvgJ+BD46vqgWOx5QM4CMBV3l0WvWmnxewIiw
// SIG // W5Q8Z8GUUZ+1OLRiqW0DrSKTMeLwe0EOFAyQIApzd+XZ
// SIG // RuiZS8aQO853O2OTOtVnvOz8AWBthcY20Ul9IfskkinB
// SIG // ZjNHAYm1HHTQHhcvjYoGuTx4h4kiX/az80aqpaeFgAiC
// SIG // 9SlfHVfjj84263ha9bvrGCWSdvYNOmVT0av3YdkFJq2w
// SIG // /uWt+X22b+zl0eOG6VOPUwU1p9GhzNB4eOsx6eq1KC+Z
// SIG // N3fECVOhYVCS1yDvCsa0/b4Wix6rOvsWszNXY8lXkYCV
// SIG // J6ty/muaZtIHB8mKDABcm7qvcDC3NeSNEoJuIJf8v8Ae
// SIG // hVoIfoVB8ZbOBnbg9B1wjY42I3FPQas7TftAoq2v/Yt7
// SIG // eTCCB3owggVioAMCAQICCmEOkNIAAAAAAAMwDQYJKoZI
// SIG // hvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAw
// SIG // BgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRl
// SIG // IEF1dGhvcml0eSAyMDExMB4XDTExMDcwODIwNTkwOVoX
// SIG // DTI2MDcwODIxMDkwOVowfjELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEoMCYGA1UEAxMfTWljcm9zb2Z0IENvZGUgU2lnbmlu
// SIG // ZyBQQ0EgMjAxMTCCAiIwDQYJKoZIhvcNAQEBBQADggIP
// SIG // ADCCAgoCggIBAKvw+nIQHC6t2G6qghBNNLrytlghn0Ib
// SIG // KmvpWlCquAY4GgRJun/DDB7dN2vGEtgL8DjCmQawyDnV
// SIG // ARQxQtOJDXlkh36UYCRsr55JnOloXtLfm1OyCizDr9mp
// SIG // K656Ca/XllnKYBoF6WZ26DJSJhIv56sIUM+zRLdd2MQu
// SIG // A3WraPPLbfM6XKEW9Ea64DhkrG5kNXimoGMPLdNAk/jj
// SIG // 3gcN1Vx5pUkp5w2+oBN3vpQ97/vjK1oQH01WKKJ6cuAS
// SIG // OrdJXtjt7UORg9l7snuGG9k+sYxd6IlPhBryoS9Z5JA7
// SIG // La4zWMW3Pv4y07MDPbGyr5I4ftKdgCz1TlaRITUlwzlu
// SIG // ZH9TupwPrRkjhMv0ugOGjfdf8NBSv4yUh7zAIXQlXxgo
// SIG // tswnKDglmDlKNs98sZKuHCOnqWbsYR9q4ShJnV+I4iVd
// SIG // 0yFLPlLEtVc/JAPw0XpbL9Uj43BdD1FGd7P4AOG8rAKC
// SIG // X9vAFbO9G9RVS+c5oQ/pI0m8GLhEfEXkwcNyeuBy5yTf
// SIG // v0aZxe/CHFfbg43sTUkwp6uO3+xbn6/83bBm4sGXgXvt
// SIG // 1u1L50kppxMopqd9Z4DmimJ4X7IvhNdXnFy/dygo8e1t
// SIG // wyiPLI9AN0/B4YVEicQJTMXUpUMvdJX3bvh4IFgsE11g
// SIG // lZo+TzOE2rCIF96eTvSWsLxGoGyY0uDWiIwLAgMBAAGj
// SIG // ggHtMIIB6TAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4E
// SIG // FgQUSG5k5VAF04KqFzc3IrVtqMp1ApUwGQYJKwYBBAGC
// SIG // NxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8G
// SIG // A1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUci06AjGQ
// SIG // Q7kUBU7h6qfHMdEjiTQwWgYDVR0fBFMwUTBPoE2gS4ZJ
// SIG // aHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwv
// SIG // cHJvZHVjdHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAz
// SIG // XzIyLmNybDBeBggrBgEFBQcBAQRSMFAwTgYIKwYBBQUH
// SIG // MAKGQmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kv
// SIG // Y2VydHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIy
// SIG // LmNydDCBnwYDVR0gBIGXMIGUMIGRBgkrBgEEAYI3LgMw
// SIG // gYMwPwYIKwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2lvcHMvZG9jcy9wcmltYXJ5Y3BzLmh0
// SIG // bTBABggrBgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBw
// SIG // AG8AbABpAGMAeQBfAHMAdABhAHQAZQBtAGUAbgB0AC4g
// SIG // HTANBgkqhkiG9w0BAQsFAAOCAgEAZ/KGpZjgVHkaLtPY
// SIG // dGcimwuWEeFjkplCln3SeQyQwWVfLiw++MNy0W2D/r4/
// SIG // 6ArKO79HqaPzadtjvyI1pZddZYSQfYtGUFXYDJJ80hpL
// SIG // HPM8QotS0LD9a+M+By4pm+Y9G6XUtR13lDni6WTJRD14
// SIG // eiPzE32mkHSDjfTLJgJGKsKKELukqQUMm+1o+mgulaAq
// SIG // PyprWEljHwlpblqYluSD9MCP80Yr3vw70L01724lruWv
// SIG // J+3Q3fMOr5kol5hNDj0L8giJ1h/DMhji8MUtzluetEk5
// SIG // CsYKwsatruWy2dsViFFFWDgycScaf7H0J/jeLDogaZiy
// SIG // WYlobm+nt3TDQAUGpgEqKD6CPxNNZgvAs0314Y9/HG8V
// SIG // fUWnduVAKmWjw11SYobDHWM2l4bf2vP48hahmifhzaWX
// SIG // 0O5dY0HjWwechz4GdwbRBrF1HxS+YWG18NzGGwS+30HH
// SIG // Diju3mUv7Jf2oVyW2ADWoUa9WfOXpQlLSBCZgB/QACnF
// SIG // sZulP0V3HjXG0qKin3p6IvpIlR+r+0cjgPWe+L9rt0uX
// SIG // 4ut1eBrs6jeZeRhL/9azI2h15q/6/IvrC4DqaTuv/DDt
// SIG // BEyO3991bWORPdGdVk5Pv4BXIqF4ETIheu9BCrE/+6jM
// SIG // pF3BoYibV3FWTkhFwELJm3ZbCoBIa/15n8G9bW1qyVJz
// SIG // Ew16UM0xghlzMIIZbwIBATCBlTB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExAhMzAAAC8kZZpy1no0u4AAAA
// SIG // AALyMA0GCWCGSAFlAwQCAQUAoIGuMBkGCSqGSIb3DQEJ
// SIG // AzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAM
// SIG // BgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCBx4NzU
// SIG // JVrI/pfHfoZ2jPsdD4EiaAwMFaJ9JBQOnbCKojBCBgor
// SIG // BgEEAYI3AgEMMTQwMqAUgBIATQBpAGMAcgBvAHMAbwBm
// SIG // AHShGoAYaHR0cDovL3d3dy5taWNyb3NvZnQuY29tMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAI+4NiYPkB4rn7PW5QOigUxs
// SIG // 8PCYQxzIXCZcMZnaWQj5XSTvazDrrp74N+sjVLTWA/og
// SIG // tfe8rdav4J9o6O9ZUq2nCWBwA77bENA9572ChQQxjXKu
// SIG // XgjYMX/4jw4Ed0/z0+4yYMhWK5uufpWzzzMN6QHNd+YE
// SIG // DgbfM9j3f1URgd8yhdWJSrwgrD8gbusJch1cM2fi8Hzm
// SIG // STQa+V/vM7GrTl1nPtQo1luwwv536Yv2KkYYauT1s/Ao
// SIG // P2wujkMi2+uMdfbejRN55IHgDsj2FUJ8ONqhqFkOk8US
// SIG // Cwih1L6DGutnLmT9ySqmTbHZuXVuKGyNImLbumrTvyJo
// SIG // gk/FB9Xk4+Ohghb9MIIW+QYKKwYBBAGCNwMDATGCFukw
// SIG // ghblBgkqhkiG9w0BBwKgghbWMIIW0gIBAzEPMA0GCWCG
// SIG // SAFlAwQCAQUAMIIBUQYLKoZIhvcNAQkQAQSgggFABIIB
// SIG // PDCCATgCAQEGCisGAQQBhFkKAwEwMTANBglghkgBZQME
// SIG // AgEFAAQgqMfS4Ihq8RpomukM3Zs9EsyqSCuiq95/TobQ
// SIG // 5/OFJM4CBmRs2mYFUxgTMjAyMzA2MDcxOTE3MTUuMjM2
// SIG // WjAEgAIB9KCB0KSBzTCByjELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjElMCMGA1UECxMcTWljcm9zb2Z0IEFtZXJpY2EgT3Bl
// SIG // cmF0aW9uczEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046
// SIG // RUFDRS1FMzE2LUM5MUQxJTAjBgNVBAMTHE1pY3Jvc29m
// SIG // dCBUaW1lLVN0YW1wIFNlcnZpY2WgghFUMIIHDDCCBPSg
// SIG // AwIBAgITMwAAAcOLb9NIvw6RXQABAAABwzANBgkqhkiG
// SIG // 9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD
// SIG // VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
// SIG // MDAeFw0yMjExMDQxOTAxMjlaFw0yNDAyMDIxOTAxMjla
// SIG // MIHKMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxN
// SIG // aWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMSYwJAYD
// SIG // VQQLEx1UaGFsZXMgVFNTIEVTTjpFQUNFLUUzMTYtQzkx
// SIG // RDElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAg
// SIG // U2VydmljZTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCC
// SIG // AgoCggIBALvrvOrN0f6vopKLPNGg+NmJttTQzmbZXTUc
// SIG // TBVMZuKPZFVpEodnPIzgsSV8FdihaHQk8aRkLPY8uZ1C
// SIG // Pi6v27dB1rUmDzDz7XreNtIM8DNRLEdupG6cJQR8RWOI
// SIG // ZN8twB/tWCn/W4bz7O5D212x+4HWnIrXgfhexaDkbfXt
// SIG // A/3bAXhvNBmQBdsui1gI+gtpjKpWn15MG308kGp7l+uW
// SIG // LvsTKcidXwERKbke+uq3j66pRNCmmng9J6joBq05EmXg
// SIG // jAzx+jrSdNI1zMGyA8h+5eH2EXiLE38zeRn91Goq7I3m
// SIG // vihcttpVPHpZyF46Hssd6XHrB/quWq2NXOhz33kp5HjK
// SIG // JP4MZwez9TI7eyPRCPbYULTL8v9UlJixtdqwUfw34XhP
// SIG // 1SaXJv02HqFddTX0EJ5f4wWz20kQadBxqkyHFg6WOjIE
// SIG // nQaEBE9Q76ROD1+LJ3TRnNcBsoOOaR+tmTH1Bfwsxme4
// SIG // let+0bZ0BVw808aEhBJHVzHVgyRvo48aAtepUZNcRZ35
// SIG // AOLqJmuJirKO6rxOndu/iussyElkO047rWCyiZ0szb34
// SIG // jYrsr/9McQgEkgEbzkN7/XHoLzP6Z7lPXOrPuIJit/uY
// SIG // 4XL51hkKiRNLaWB5pN25pgS9YB5vU4wSc+Zv/K7xzN0c
// SIG // NzlIVeP8JgC99ipj0eVG2+MMORzRormNAgMBAAGjggE2
// SIG // MIIBMjAdBgNVHQ4EFgQUHBi+zdjXbwGivE3C68TE7GvG
// SIG // gdYwHwYDVR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ
// SIG // 6XIwXwYDVR0fBFgwVjBUoFKgUIZOaHR0cDovL3d3dy5t
// SIG // aWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljcm9zb2Z0
// SIG // JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3Js
// SIG // MGwGCCsGAQUFBwEBBGAwXjBcBggrBgEFBQcwAoZQaHR0
// SIG // cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0
// SIG // cy9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIw
// SIG // MjAxMCgxKS5jcnQwDAYDVR0TAQH/BAIwADATBgNVHSUE
// SIG // DDAKBggrBgEFBQcDCDANBgkqhkiG9w0BAQsFAAOCAgEA
// SIG // 3fKmWxwanQRUQ8RhsA6JZZ0cndFplJ46qD/uUAh+LzDw
// SIG // beLph1YSbsnkZAxC5E1mblqit1Nc9h5xmrW5xE3B1Jcs
// SIG // JR/tyO0e31NMymMNjywPlWsAnK57CAoBN9uNhLBAv2dG
// SIG // FO+NDSf8W7s6xrUxLVCIkL69gAjycobD6LXvCLU3+LjV
// SIG // uDG6NUD9LY3ASgoBHsyAuA2FDNAWAlgpnmZjcAJcX6U5
// SIG // YjhRCgfVGkqh0rOdXB/CWNIKi9y8CPS2H4xDu+/vh2P5
// SIG // zKlwjIvYoVCqCKdk34383ZuTYOVfssPPsF5dvUXFuEOA
// SIG // rx57TXysU/aENye2AUEBB1iT4PEzUfcOAfNhc5qw3fLC
// SIG // +hE7xrseYRXMJhfkNq0+TGvHWFEnQkoP4oaBGFBiWZ2S
// SIG // /Z8g6dbJ35UlV+xaS8gC8ww5RwVtQiYWFX3yUaKs9Q+J
// SIG // EaKKkQTUWjBTD4p4MsMGxIITIXiSjaHWuwBoKvtRx9Wn
// SIG // 0ZRPvamFvRSjHs8XkJn/IHLgLoa/SAF8mhfQxdDyeX+L
// SIG // oczkryAtQZCbcxeqKeOVGGiO1fvV/HXMF22SZyCAB9XI
// SIG // 1TvChAocSiJKZOEIMtD6HIFMGhlqpi1kbtYUNViVp0F7
// SIG // 7wWHmAxlm4/z7UpcsL+pvJroy3qXzLyXFNuSlpJUj9hb
// SIG // jcemjlX3o3vqYG8CECFUNZ0wggdxMIIFWaADAgECAhMz
// SIG // AAAAFcXna54Cm0mZAAAAAAAVMA0GCSqGSIb3DQEBCwUA
// SIG // MIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylN
// SIG // aWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3Jp
// SIG // dHkgMjAxMDAeFw0yMTA5MzAxODIyMjVaFw0zMDA5MzAx
// SIG // ODMyMjVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
// SIG // YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
// SIG // VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNV
// SIG // BAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEw
// SIG // MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA
// SIG // 5OGmTOe0ciELeaLL1yR5vQ7VgtP97pwHB9KpbE51yMo1
// SIG // V/YBf2xK4OK9uT4XYDP/XE/HZveVU3Fa4n5KWv64NmeF
// SIG // RiMMtY0Tz3cywBAY6GB9alKDRLemjkZrBxTzxXb1hlDc
// SIG // wUTIcVxRMTegCjhuje3XD9gmU3w5YQJ6xKr9cmmvHaus
// SIG // 9ja+NSZk2pg7uhp7M62AW36MEBydUv626GIl3GoPz130
// SIG // /o5Tz9bshVZN7928jaTjkY+yOSxRnOlwaQ3KNi1wjjHI
// SIG // NSi947SHJMPgyY9+tVSP3PoFVZhtaDuaRr3tpK56KTes
// SIG // y+uDRedGbsoy1cCGMFxPLOJiss254o2I5JasAUq7vnGp
// SIG // F1tnYN74kpEeHT39IM9zfUGaRnXNxF803RKJ1v2lIH1+
// SIG // /NmeRd+2ci/bfV+AutuqfjbsNkz2K26oElHovwUDo9Fz
// SIG // pk03dJQcNIIP8BDyt0cY7afomXw/TNuvXsLz1dhzPUNO
// SIG // wTM5TI4CvEJoLhDqhFFG4tG9ahhaYQFzymeiXtcodgLi
// SIG // Mxhy16cg8ML6EgrXY28MyTZki1ugpoMhXV8wdJGUlNi5
// SIG // UPkLiWHzNgY1GIRH29wb0f2y1BzFa/ZcUlFdEtsluq9Q
// SIG // BXpsxREdcu+N+VLEhReTwDwV2xo3xwgVGD94q0W29R6H
// SIG // XtqPnhZyacaue7e3PmriLq0CAwEAAaOCAd0wggHZMBIG
// SIG // CSsGAQQBgjcVAQQFAgMBAAEwIwYJKwYBBAGCNxUCBBYE
// SIG // FCqnUv5kxJq+gpE8RjUpzxD/LwTuMB0GA1UdDgQWBBSf
// SIG // pxVdAF5iXYP05dJlpxtTNRnpcjBcBgNVHSAEVTBTMFEG
// SIG // DCsGAQQBgjdMg30BATBBMD8GCCsGAQUFBwIBFjNodHRw
// SIG // Oi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL0RvY3Mv
// SIG // UmVwb3NpdG9yeS5odG0wEwYDVR0lBAwwCgYIKwYBBQUH
// SIG // AwgwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYD
// SIG // VR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0j
// SIG // BBgwFoAU1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0f
// SIG // BE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0
// SIG // XzIwMTAtMDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBK
// SIG // BggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0w
// SIG // Ni0yMy5jcnQwDQYJKoZIhvcNAQELBQADggIBAJ1Vffwq
// SIG // reEsH2cBMSRb4Z5yS/ypb+pcFLY+TkdkeLEGk5c9MTO1
// SIG // OdfCcTY/2mRsfNB1OW27DzHkwo/7bNGhlBgi7ulmZzpT
// SIG // Td2YurYeeNg2LpypglYAA7AFvonoaeC6Ce5732pvvinL
// SIG // btg/SHUB2RjebYIM9W0jVOR4U3UkV7ndn/OOPcbzaN9l
// SIG // 9qRWqveVtihVJ9AkvUCgvxm2EhIRXT0n4ECWOKz3+SmJ
// SIG // w7wXsFSFQrP8DJ6LGYnn8AtqgcKBGUIZUnWKNsIdw2Fz
// SIG // Lixre24/LAl4FOmRsqlb30mjdAy87JGA0j3mSj5mO0+7
// SIG // hvoyGtmW9I/2kQH2zsZ0/fZMcm8Qq3UwxTSwethQ/gpY
// SIG // 3UA8x1RtnWN0SCyxTkctwRQEcb9k+SS+c23Kjgm9swFX
// SIG // SVRk2XPXfx5bRAGOWhmRaw2fpCjcZxkoJLo4S5pu+yFU
// SIG // a2pFEUep8beuyOiJXk+d0tBMdrVXVAmxaQFEfnyhYWxz
// SIG // /gq77EFmPWn9y8FBSX5+k77L+DvktxW/tM4+pTFRhLy/
// SIG // AsGConsXHRWJjXD+57XQKBqJC4822rpM+Zv/Cuk0+CQ1
// SIG // ZyvgDbjmjJnW4SLq8CdCPSWU5nR0W2rRnj7tfqAxM328
// SIG // y+l7vzhwRNGQ8cirOoo6CGJ/2XBjU02N7oJtpQUQwXEG
// SIG // ahC0HVUzWLOhcGbyoYICyzCCAjQCAQEwgfihgdCkgc0w
// SIG // gcoxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
// SIG // dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
// SIG // aWNyb3NvZnQgQ29ycG9yYXRpb24xJTAjBgNVBAsTHE1p
// SIG // Y3Jvc29mdCBBbWVyaWNhIE9wZXJhdGlvbnMxJjAkBgNV
// SIG // BAsTHVRoYWxlcyBUU1MgRVNOOkVBQ0UtRTMxNi1DOTFE
// SIG // MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBT
// SIG // ZXJ2aWNloiMKAQEwBwYFKw4DAhoDFQDxHS/j7PodN3vk
// SIG // i13Rs7mO7S7uzqCBgzCBgKR+MHwxCzAJBgNVBAYTAlVT
// SIG // MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
// SIG // ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0
// SIG // YW1wIFBDQSAyMDEwMA0GCSqGSIb3DQEBBQUAAgUA6Cse
// SIG // 5zAiGA8yMDIzMDYwNzIzMjExMVoYDzIwMjMwNjA4MjMy
// SIG // MTExWjB0MDoGCisGAQQBhFkKBAExLDAqMAoCBQDoKx7n
// SIG // AgEAMAcCAQACAgw4MAcCAQACAhEDMAoCBQDoLHBnAgEA
// SIG // MDYGCisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwKg
// SIG // CjAIAgEAAgMHoSChCjAIAgEAAgMBhqAwDQYJKoZIhvcN
// SIG // AQEFBQADgYEAAP878Pw2QffvSvRaao/9eaQfJHyR1fcx
// SIG // JwCLM2R3xeAPS0/X3y58S2OW7LSrzHICcWDyCefGOB7n
// SIG // 37cAhURYQRSMe7mPsbVKmU1wQ/GhhIHZAdqzjaLCTs3D
// SIG // jUu3VhPVqm6UMq4VykO4ew0+gf37C6gueGmCGM35ywzc
// SIG // EMlsXEcxggQNMIIECQIBATCBkzB8MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1T
// SIG // dGFtcCBQQ0EgMjAxMAITMwAAAcOLb9NIvw6RXQABAAAB
// SIG // wzANBglghkgBZQMEAgEFAKCCAUowGgYJKoZIhvcNAQkD
// SIG // MQ0GCyqGSIb3DQEJEAEEMC8GCSqGSIb3DQEJBDEiBCC5
// SIG // 3OU4bcnjh6TPNfy5tR1hb/etvNIoVRWQMOwk97dGtDCB
// SIG // +gYLKoZIhvcNAQkQAi8xgeowgecwgeQwgb0EINL7U5tv
// SIG // kknq4dSogJMKyUwC8U3yaLZT3A2dmUp+/CpJMIGYMIGA
// SIG // pH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hp
// SIG // bmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
// SIG // FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMd
// SIG // TWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMA
// SIG // AAHDi2/TSL8OkV0AAQAAAcMwIgQgudjiHUGtI1f293SS
// SIG // 30JFclfrx3i28MVsBSZYB0Lmqk8wDQYJKoZIhvcNAQEL
// SIG // BQAEggIAXt/6HyTDjfewupM8UanGb5s6EEpP7QMEemOj
// SIG // mQahwkmVLca4vT7OGKK7n34GnLpfvq7Y+KBkTAKeab9G
// SIG // KB8TfYhlcEbpMDZyq0uG3fYg6RWEwpB9WjwDsAS7xx10
// SIG // cLE61wTNmuKG8+cCn7BuruJp++TkQ88lWvLWmp1MnnVd
// SIG // yoHAT72GkgVyjcHY/H3WdNsR6obg+JXlrkPa18Xkc42E
// SIG // lIFvip/lJ9M97co8B8sx6VaEx84k0Jc0KQbCK54AQWPx
// SIG // 4VjGZRPp7nalnlAKH3LnYuW5N1JYsZH0gdCNixAWH9qV
// SIG // JOll+nXTjs+t0Zhpr2L/t/XXMjylgXgvKsgh9QQvRWX8
// SIG // jT2sTowwUQf2XH9Em19Mf/MQjmmATPgIudP+CN/FHNWo
// SIG // G6Z8N1XeH5gzgTOAJkdl1E8GBFuy12L8SHlx6td3PKWi
// SIG // UQ6Ffg03zSKJqb/HGoylk9b7s3E92I6UCOncNVd6GGDy
// SIG // Y/98xc8GDXKNdpvZ0OhSLFRC/UEtO3t8kahTPT8+uhXF
// SIG // ELf9eHogRm+FYrTW7cOVHLXb4jUR2JljpP/46yLbW6B1
// SIG // ZW8Iq1ctNLhRRa8H4A0GbjY3ZCTuAdpBbZARMpLcb4zn
// SIG // cuScCpF0/st1ELuC1U2exiYIkJsl/NioA/yQ6cjjriQ4
// SIG // aCx86/qnudDn93gUqVSc299NamBt/nE=
// SIG // End signature block
