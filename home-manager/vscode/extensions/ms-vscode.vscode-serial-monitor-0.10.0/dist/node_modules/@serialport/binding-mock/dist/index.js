"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var debugFactory=require("debug");function _interopDefaultLegacy(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var debugFactory__default=_interopDefaultLegacy(debugFactory);const debug=debugFactory__default.default("serialport/binding-mock");let ports={},serialNumber=0;function resolveNextTick(){return new Promise((e=>process.nextTick((()=>e()))))}class CanceledError extends Error{constructor(e){super(e),this.canceled=!0}}const MockBinding={reset(){ports={},serialNumber=0},createPort(e,t={}){serialNumber++;const r=Object.assign({echo:!1,record:!1,manufacturer:"The J5 Robotics Company",vendorId:void 0,productId:void 0,maxReadSize:1024},t);ports[e]={data:Buffer.alloc(0),echo:r.echo,record:r.record,readyData:r.readyData,maxReadSize:r.maxReadSize,info:{path:e,manufacturer:r.manufacturer,serialNumber:`${serialNumber}`,pnpId:void 0,locationId:void 0,vendorId:r.vendorId,productId:r.productId}},debug(serialNumber,"created port",JSON.stringify({path:e,opt:t}))},list:async()=>(debug(null,"list"),Object.values(ports).map((e=>e.info))),async open(e){var t;if(!e||"object"!=typeof e||Array.isArray(e))throw new TypeError('"options" is not an object');if(!e.path)throw new TypeError('"path" is not a valid port');if(!e.baudRate)throw new TypeError('"baudRate" is not a valid baudRate');const r=Object.assign({dataBits:8,lock:!0,stopBits:1,parity:"none",rtscts:!1,xon:!1,xoff:!1,xany:!1,hupcl:!0},e),{path:i}=r;debug(null,`open: opening path ${i}`);const o=ports[i];if(await resolveNextTick(),!o)throw new Error(`Port does not exist - please call MockBinding.createPort('${i}') first`);const s=o.info.serialNumber;if(null===(t=o.openOpt)||void 0===t?void 0:t.lock)throw debug(s,"open: Port is locked cannot open"),new Error("Port is locked cannot open");return debug(s,`open: opened path ${i}`),o.openOpt=Object.assign({},r),new MockPortBinding(o,r)}};class MockPortBinding{constructor(e,t){if(this.port=e,this.openOptions=t,this.pendingRead=null,this.isOpen=!0,this.lastWrite=null,this.recording=Buffer.alloc(0),this.writeOperation=null,this.serialNumber=e.info.serialNumber,e.readyData){const t=e.readyData;process.nextTick((()=>{this.isOpen&&(debug(this.serialNumber,"emitting ready data"),this.emitData(t))}))}}emitData(e){if(!this.isOpen||!this.port)throw new Error("Port must be open to pretend to receive data");const t=Buffer.isBuffer(e)?e:Buffer.from(e);debug(this.serialNumber,"emitting data - pending read:",Boolean(this.pendingRead)),this.port.data=Buffer.concat([this.port.data,t]),this.pendingRead&&(process.nextTick(this.pendingRead),this.pendingRead=null)}async close(){if(debug(this.serialNumber,"close"),!this.isOpen)throw new Error("Port is not open");const e=this.port;if(!e)throw new Error("already closed");e.openOpt=void 0,e.data=Buffer.alloc(0),debug(this.serialNumber,"port is closed"),this.serialNumber=void 0,this.isOpen=!1,this.pendingRead&&this.pendingRead(new CanceledError("port is closed"))}async read(e,t,r){if(!Buffer.isBuffer(e))throw new TypeError('"buffer" is not a Buffer');if("number"!=typeof t||isNaN(t))throw new TypeError(`"offset" is not an integer got "${isNaN(t)?"NaN":typeof t}"`);if("number"!=typeof r||isNaN(r))throw new TypeError(`"length" is not an integer got "${isNaN(r)?"NaN":typeof r}"`);if(e.length<t+r)throw new Error("buffer is too small");if(!this.isOpen)throw new Error("Port is not open");if(debug(this.serialNumber,"read",r,"bytes"),await resolveNextTick(),!this.isOpen||!this.port)throw new CanceledError("Read canceled");if(this.port.data.length<=0)return new Promise(((i,o)=>{this.pendingRead=s=>{if(s)return o(s);this.read(e,t,r).then(i,o)}}));const i=this.port.maxReadSize>r?r:this.port.maxReadSize,o=this.port.data.slice(0,i).copy(e,t);return this.port.data=this.port.data.slice(i),debug(this.serialNumber,"read",o,"bytes"),{bytesRead:o,buffer:e}}async write(e){if(!Buffer.isBuffer(e))throw new TypeError('"buffer" is not a Buffer');if(!this.isOpen||!this.port)throw debug("write","error port is not open"),new Error("Port is not open");if(debug(this.serialNumber,"write",e.length,"bytes"),this.writeOperation)throw new Error("Overlapping writes are not supported and should be queued by the serialport object");return this.writeOperation=(async()=>{if(await resolveNextTick(),!this.isOpen||!this.port)throw new Error("Write canceled");const t=this.lastWrite=Buffer.from(e);this.port.record&&(this.recording=Buffer.concat([this.recording,t])),this.port.echo&&process.nextTick((()=>{this.isOpen&&this.emitData(t)})),this.writeOperation=null,debug(this.serialNumber,"writing finished")})(),this.writeOperation}async update(e){if("object"!=typeof e)throw TypeError('"options" is not an object');if("number"!=typeof e.baudRate)throw new TypeError('"options.baudRate" is not a number');if(debug(this.serialNumber,"update"),!this.isOpen||!this.port)throw new Error("Port is not open");await resolveNextTick(),this.port.openOpt&&(this.port.openOpt.baudRate=e.baudRate)}async set(e){if("object"!=typeof e)throw new TypeError('"options" is not an object');if(debug(this.serialNumber,"set"),!this.isOpen)throw new Error("Port is not open");await resolveNextTick()}async get(){if(debug(this.serialNumber,"get"),!this.isOpen)throw new Error("Port is not open");return await resolveNextTick(),{cts:!0,dsr:!1,dcd:!1}}async getBaudRate(){var e;if(debug(this.serialNumber,"getBaudRate"),!this.isOpen||!this.port)throw new Error("Port is not open");if(await resolveNextTick(),!(null===(e=this.port.openOpt)||void 0===e?void 0:e.baudRate))throw new Error("Internal Error");return{baudRate:this.port.openOpt.baudRate}}async flush(){if(debug(this.serialNumber,"flush"),!this.isOpen||!this.port)throw new Error("Port is not open");await resolveNextTick(),this.port.data=Buffer.alloc(0)}async drain(){if(debug(this.serialNumber,"drain"),!this.isOpen)throw new Error("Port is not open");await this.writeOperation,await resolveNextTick()}}exports.CanceledError=CanceledError,exports.MockBinding=MockBinding,exports.MockPortBinding=MockPortBinding;
// SIG // Begin signature block
// SIG // MIIn5AYJKoZIhvcNAQcCoIIn1TCCJ9ECAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // YMWV7QwjddRm7d8Ablfngjz3muxs1ZA6++aG2MuOBPCg
// SIG // gg2aMIIGGDCCBACgAwIBAgITMwAAAvQbjHGw5R+wOgAA
// SIG // AAAC9DANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIyMDYzMDE3MzgyM1oX
// SIG // DTIzMDkxNTE3MzgyM1owgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCAzcmQgUGFydHkg
// SIG // QXBwbGljYXRpb24gQ29tcG9uZW50MIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAovJsp2fpXM10kbg5
// SIG // LdT94DW31Bcki5WOHMgTSANJlsLg6q4++dmjVdGJWjK0
// SIG // vlVCKplUrfHIiAjhGXXc1uLZSfuW5m7eOG1Y80NUiGC3
// SIG // LybeP4dUH1VWvfzeJzKw1qgwInTGgqUzO5aOwznRngdh
// SIG // YqCnkEGv9J+jbz301ZZUgVfsnOoxid7leJqcCXdXlmoy
// SIG // rITd4JPl92bZ9j2r9foO4v9WLSz8pqsBYNSlXSWw2BOd
// SIG // VcEs+bRkqc0wr43GLbVcQHJqnUUKEsnXoWRPWkb/uaX1
// SIG // g6lmnIpXTojPxkJDLXVoaSq3jeebr+SdTWzLjHVksEw7
// SIG // YvQvw2OBbTap1koEHQIDAQABo4IBgjCCAX4wHwYDVR0l
// SIG // BBgwFgYKKwYBBAGCN0wRAQYIKwYBBQUHAwMwHQYDVR0O
// SIG // BBYEFF8RHsb5v7Dszq4BlUon5WTGyfpvMFQGA1UdEQRN
// SIG // MEukSTBHMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFu
// SIG // ZCBPcGVyYXRpb25zIExpbWl0ZWQxFjAUBgNVBAUTDTIz
// SIG // MTUyMis0NzEzMzcwHwYDVR0jBBgwFoAUSG5k5VAF04Kq
// SIG // Fzc3IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0
// SIG // cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwv
// SIG // TWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBh
// SIG // BggrBgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMv
// SIG // TWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAM
// SIG // BgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQBs
// SIG // FhfFnls1uOsWNyCPzprgpge3+F16IK5Vid3DKAAP6L0Q
// SIG // ILYV5nwSulqXjDGAAjbKXGXLR/PqpRVnXKFP5nT/SscI
// SIG // iJ/h4TQ0egeauXHR0tIRJLm1rkFdmBs5rhmjDcA9WxSa
// SIG // CG1GB5UIBTYO5Tck6dVHGxdJG6/LVBam+lkwL66GcPoV
// SIG // njQqxEQ1x5BRdtu0OvTcaooz4URjQPcYIVMe4avXDOUQ
// SIG // CcTWynmtyZvonzqLfVWimbEIwhrg30/d5Nf0xClqpWIQ
// SIG // 1dFdWmku8aZDMa/RQwb0hylU/EJ6TwcZeWdaJew41yWe
// SIG // PH/CMuUtreCSu0F8948ldiZM+lAfgTNk4P3nVw5oIdRc
// SIG // h5G2fMcNAoBmQ4tBk7X0GjFwN95epDK1LQPzN82tG3la
// SIG // qdhbf7jNH/Gx++1kDTq0MTNpc53CJOf0FcMOBcmhxJ1C
// SIG // EIyHhGdI0feDmTA7i8giO5lC2gP/6vKAZpLOyW3LTxfH
// SIG // uAda1z9UW+oAxcZc6eM21Gdk1bjoz0kQDZWhtwgipD0C
// SIG // U+JXxos6501tZtlanyREh0u16IiN79Ii5g3nJ52Tnkvu
// SIG // Qv47ImKxWzFS62RAMqaX3TFYzut9R0Gn2KGvX0OGVFPR
// SIG // kuo3YLybJNAdTz0tgEN4wH9UOuGrHYaL0walq23nDdsg
// SIG // FwBXdWGJ94cV7NMw2Kdc2DCCB3owggVioAMCAQICCmEO
// SIG // kNIAAAAAAAMwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBS
// SIG // b290IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDExMB4X
// SIG // DTExMDcwODIwNTkwOVoXDTI2MDcwODIxMDkwOVowfjEL
// SIG // MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
// SIG // EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
// SIG // c29mdCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWljcm9z
// SIG // b2Z0IENvZGUgU2lnbmluZyBQQ0EgMjAxMTCCAiIwDQYJ
// SIG // KoZIhvcNAQEBBQADggIPADCCAgoCggIBAKvw+nIQHC6t
// SIG // 2G6qghBNNLrytlghn0IbKmvpWlCquAY4GgRJun/DDB7d
// SIG // N2vGEtgL8DjCmQawyDnVARQxQtOJDXlkh36UYCRsr55J
// SIG // nOloXtLfm1OyCizDr9mpK656Ca/XllnKYBoF6WZ26DJS
// SIG // JhIv56sIUM+zRLdd2MQuA3WraPPLbfM6XKEW9Ea64Dhk
// SIG // rG5kNXimoGMPLdNAk/jj3gcN1Vx5pUkp5w2+oBN3vpQ9
// SIG // 7/vjK1oQH01WKKJ6cuASOrdJXtjt7UORg9l7snuGG9k+
// SIG // sYxd6IlPhBryoS9Z5JA7La4zWMW3Pv4y07MDPbGyr5I4
// SIG // ftKdgCz1TlaRITUlwzluZH9TupwPrRkjhMv0ugOGjfdf
// SIG // 8NBSv4yUh7zAIXQlXxgotswnKDglmDlKNs98sZKuHCOn
// SIG // qWbsYR9q4ShJnV+I4iVd0yFLPlLEtVc/JAPw0XpbL9Uj
// SIG // 43BdD1FGd7P4AOG8rAKCX9vAFbO9G9RVS+c5oQ/pI0m8
// SIG // GLhEfEXkwcNyeuBy5yTfv0aZxe/CHFfbg43sTUkwp6uO
// SIG // 3+xbn6/83bBm4sGXgXvt1u1L50kppxMopqd9Z4DmimJ4
// SIG // X7IvhNdXnFy/dygo8e1twyiPLI9AN0/B4YVEicQJTMXU
// SIG // pUMvdJX3bvh4IFgsE11glZo+TzOE2rCIF96eTvSWsLxG
// SIG // oGyY0uDWiIwLAgMBAAGjggHtMIIB6TAQBgkrBgEEAYI3
// SIG // FQEEAwIBADAdBgNVHQ4EFgQUSG5k5VAF04KqFzc3IrVt
// SIG // qMp1ApUwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEw
// SIG // CwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYD
// SIG // VR0jBBgwFoAUci06AjGQQ7kUBU7h6qfHMdEjiTQwWgYD
// SIG // VR0fBFMwUTBPoE2gS4ZJaHR0cDovL2NybC5taWNyb3Nv
// SIG // ZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2Vy
// SIG // QXV0MjAxMV8yMDExXzAzXzIyLmNybDBeBggrBgEFBQcB
// SIG // AQRSMFAwTgYIKwYBBQUHMAKGQmh0dHA6Ly93d3cubWlj
// SIG // cm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0
// SIG // MjAxMV8yMDExXzAzXzIyLmNydDCBnwYDVR0gBIGXMIGU
// SIG // MIGRBgkrBgEEAYI3LgMwgYMwPwYIKwYBBQUHAgEWM2h0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvZG9j
// SIG // cy9wcmltYXJ5Y3BzLmh0bTBABggrBgEFBQcCAjA0HjIg
// SIG // HQBMAGUAZwBhAGwAXwBwAG8AbABpAGMAeQBfAHMAdABh
// SIG // AHQAZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOC
// SIG // AgEAZ/KGpZjgVHkaLtPYdGcimwuWEeFjkplCln3SeQyQ
// SIG // wWVfLiw++MNy0W2D/r4/6ArKO79HqaPzadtjvyI1pZdd
// SIG // ZYSQfYtGUFXYDJJ80hpLHPM8QotS0LD9a+M+By4pm+Y9
// SIG // G6XUtR13lDni6WTJRD14eiPzE32mkHSDjfTLJgJGKsKK
// SIG // ELukqQUMm+1o+mgulaAqPyprWEljHwlpblqYluSD9MCP
// SIG // 80Yr3vw70L01724lruWvJ+3Q3fMOr5kol5hNDj0L8giJ
// SIG // 1h/DMhji8MUtzluetEk5CsYKwsatruWy2dsViFFFWDgy
// SIG // cScaf7H0J/jeLDogaZiyWYlobm+nt3TDQAUGpgEqKD6C
// SIG // PxNNZgvAs0314Y9/HG8VfUWnduVAKmWjw11SYobDHWM2
// SIG // l4bf2vP48hahmifhzaWX0O5dY0HjWwechz4GdwbRBrF1
// SIG // HxS+YWG18NzGGwS+30HHDiju3mUv7Jf2oVyW2ADWoUa9
// SIG // WfOXpQlLSBCZgB/QACnFsZulP0V3HjXG0qKin3p6IvpI
// SIG // lR+r+0cjgPWe+L9rt0uX4ut1eBrs6jeZeRhL/9azI2h1
// SIG // 5q/6/IvrC4DqaTuv/DDtBEyO3991bWORPdGdVk5Pv4BX
// SIG // IqF4ETIheu9BCrE/+6jMpF3BoYibV3FWTkhFwELJm3Zb
// SIG // CoBIa/15n8G9bW1qyVJzEw16UM0xghmiMIIZngIBATCB
// SIG // lTB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9N
// SIG // aWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExAhMz
// SIG // AAAC9BuMcbDlH7A6AAAAAAL0MA0GCWCGSAFlAwQCAQUA
// SIG // oIGuMBkGCSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwG
// SIG // CisGAQQBgjcCAQsxDjAMBgorBgEEAYI3AgEVMC8GCSqG
// SIG // SIb3DQEJBDEiBCCu2f3h46HiXjMDWVtrUGNZ6iHtIPGz
// SIG // 1AwfywKc9On1LzBCBgorBgEEAYI3AgEMMTQwMqAUgBIA
// SIG // TQBpAGMAcgBvAHMAbwBmAHShGoAYaHR0cDovL3d3dy5t
// SIG // aWNyb3NvZnQuY29tMA0GCSqGSIb3DQEBAQUABIIBAAJU
// SIG // E2fJG2gKe4FIjmnj6+5sUin0opZtAFVoepxjYdmqGCDA
// SIG // ulRgu9HkB1+44c7Rvl1TQHo+pSmao1gsICvLehyq0MI6
// SIG // vXsPriq8vliw3wGcn7ESNisMR6g6jMobcNEkqHDngmpi
// SIG // 1Wxxo4iBpdsqBBsOCjInnXPtimORVDfuVNfP/ggAzvsH
// SIG // dIYkPNMYAOKkmnRtX3tmJe1xZWoWxgrYFuahKAVJVAUv
// SIG // rp7+m6qmmTMhQ5xtBqroguebDKquYRSbRB8UcByjKD0e
// SIG // ZeIXTy74nGdQZ/qvc8eetQGKjWHoJn9cGCUEIX9ixe/q
// SIG // zAoT8XwiunabLR8VUdfDlCjMT7VmeBShghcsMIIXKAYK
// SIG // KwYBBAGCNwMDATGCFxgwghcUBgkqhkiG9w0BBwKgghcF
// SIG // MIIXAQIBAzEPMA0GCWCGSAFlAwQCAQUAMIIBWQYLKoZI
// SIG // hvcNAQkQAQSgggFIBIIBRDCCAUACAQEGCisGAQQBhFkK
// SIG // AwEwMTANBglghkgBZQMEAgEFAAQgwBsQTcZN7KtSuWVa
// SIG // zB7ec55SJsJOJ2SU8GqavP6n/Y8CBmRs8s5ZORgTMjAy
// SIG // MzA2MDcxOTE3MjAuNDA2WjAEgAIB9KCB2KSB1TCB0jEL
// SIG // MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
// SIG // EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
// SIG // c29mdCBDb3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9z
// SIG // b2Z0IElyZWxhbmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYw
// SIG // JAYDVQQLEx1UaGFsZXMgVFNTIEVTTjpEMDgyLTRCRkQt
// SIG // RUVCQTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3Rh
// SIG // bXAgU2VydmljZaCCEXswggcnMIIFD6ADAgECAhMzAAAB
// SIG // uh8/GffBdb18AAEAAAG6MA0GCSqGSIb3DQEBCwUAMHwx
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jv
// SIG // c29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTIyMDky
// SIG // MDIwMjIxOVoXDTIzMTIxNDIwMjIxOVowgdIxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xLTArBgNVBAsTJE1pY3Jvc29mdCBJ
// SIG // cmVsYW5kIE9wZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UE
// SIG // CxMdVGhhbGVzIFRTUyBFU046RDA4Mi00QkZELUVFQkEx
// SIG // JTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNl
// SIG // cnZpY2UwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK
// SIG // AoICAQCIThWDM5I1gBPVFZ1xfYURr9MQUcXPiOR7t4cV
// SIG // RV8it7t/MbrBG9KS5MI4BrQ7Giy265TMal97RW/9wYBD
// SIG // xAty9MF++oA/Mx7fsIgVeZquQVqKdvaka4DCSigj3KUJ
// SIG // 0o7PQf+FzBRb66XT4nGQ7+NxS4M/Xx6jKtCyQ8OSQBxg
// SIG // 0t9EwmPTheNz+HeOGfZROwmlUtqSTBdy+OdzFwecmCvy
// SIG // g24pYRET9Y8Z9spfrRgkYLiALDBtKHjoV2sPLkhjoUug
// SIG // Akh2/nm4tNN/DBR8qEzYSn/kmKODqUmN8T+PrMAQUyg6
// SIG // GD9cB/gn8RuofX8pgSUD0GWqn5dK4ogy45g7p0LR9Rg+
// SIG // uAIq+ZPSXcIaucC5kll48hVS/iA3zqXYsSen+aPjIROh
// SIG // +Ld9cPqa8oB5ndlB0Oue1BsehTbs8AvkqQB5le+jGWGn
// SIG // OLgIU4Gj+Oz9nnktaHJL8oZfcmvvScz3zJLoN8Xr8xQA
// SIG // 1oi0TK9OuhDFe6tyUkQLJwkvRkNPAuBSj20ofDjzN9y5
// SIG // 4NH38QDZxwAF/wxO3B3Me5fY2ldwHJpI+6Koq+BIdruW
// SIG // McImkxN+12jLpl9hEtzyeTQWl6u2HSycMkg/lPaZP7Ze
// SIG // HUNbfxHqO7g05YjskJA/CO+MaVQdE99f+uyh35AZBVb8
// SIG // usMnttVfvSAvLkg/vkYA90cLTdpBPwIDAQABo4IBSTCC
// SIG // AUUwHQYDVR0OBBYEFIpi5vEDHiWtuY/TFnmmyNh0r2Tl
// SIG // MB8GA1UdIwQYMBaAFJ+nFV0AXmJdg/Tl0mWnG1M1Gely
// SIG // MF8GA1UdHwRYMFYwVKBSoFCGTmh0dHA6Ly93d3cubWlj
// SIG // cm9zb2Z0LmNvbS9wa2lvcHMvY3JsL01pY3Jvc29mdCUy
// SIG // MFRpbWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNybDBs
// SIG // BggrBgEFBQcBAQRgMF4wXAYIKwYBBQUHMAKGUGh0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMv
// SIG // TWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIw
// SIG // MTAoMSkuY3J0MAwGA1UdEwEB/wQCMAAwFgYDVR0lAQH/
// SIG // BAwwCgYIKwYBBQUHAwgwDgYDVR0PAQH/BAQDAgeAMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQBfyPFOoW2Ybw3J/ep2erZG
// SIG // 0hI1z7ymesK6Gl3ILLRIaYGnhMJXi7j1xy8xFrbibmM+
// SIG // HrIZoV6ha+PZWwHF+Ujef3BLD9MXRWsm+1OT/eCWXdx4
// SIG // xb6VkTaDQYRd0gzNAN/LCNh/oY4Qf1X19V3GYnotUTjw
// SIG // Mgh3AYBy8kKxLupp29x4WyHa/IdE2u1hcpRoS0hVusJs
// SIG // yrrD+mjpZpxkmnOTTH5WupUb02B3dvK22woH0ptUYU4K
// SIG // GY/lvA0yrYhDMLmxyd5iDypqPMbSSFlz516ulyoJXay+
// SIG // XMpyzF/9Fl+uTrlmx1eRkxC3X1rxldw2maxz1EP1D99S
// SIG // nqm9sY1Qm99C1cIG4yL2Eu+zdXQEZDfBf/aSdYDuCL2V
// SIG // jMMjJSihRqIztX9cG40lnAP+e7bHPrdm5azFoEjR4Mw6
// SIG // 9NY2z0rqUY8tx7fWWbOMTdNnol93htveza7QupeHP4M5
// SIG // 9tHqqKlsf7h1sZk4AdBeaLAbkxznu+w8hANLoQKxpYCj
// SIG // /dY4IYLfzlR6B+uYNEKgrYGft+ppwhIOiDoRaBawnNHy
// SIG // RRlZm9fte4BHvh0TDO4wZODtOifiKKBayN3tzyYz60Gp
// SIG // 6PzMhN4fswLgVhjA0XFJTSgg1O3Rp1rx911sC6wgiHM/
// SIG // txsEVDLC7A3T1tjlb+79XhCYjEiGdj/jOy9tEPGs51OD
// SIG // gDCCB3EwggVZoAMCAQICEzMAAAAVxedrngKbSZkAAAAA
// SIG // ABUwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVT
// SIG // MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
// SIG // ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290IENl
// SIG // cnRpZmljYXRlIEF1dGhvcml0eSAyMDEwMB4XDTIxMDkz
// SIG // MDE4MjIyNVoXDTMwMDkzMDE4MzIyNVowfDELMAkGA1UE
// SIG // BhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV
// SIG // BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD
// SIG // b3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRp
// SIG // bWUtU3RhbXAgUENBIDIwMTAwggIiMA0GCSqGSIb3DQEB
// SIG // AQUAA4ICDwAwggIKAoICAQDk4aZM57RyIQt5osvXJHm9
// SIG // DtWC0/3unAcH0qlsTnXIyjVX9gF/bErg4r25PhdgM/9c
// SIG // T8dm95VTcVrifkpa/rg2Z4VGIwy1jRPPdzLAEBjoYH1q
// SIG // UoNEt6aORmsHFPPFdvWGUNzBRMhxXFExN6AKOG6N7dcP
// SIG // 2CZTfDlhAnrEqv1yaa8dq6z2Nr41JmTamDu6GnszrYBb
// SIG // fowQHJ1S/rboYiXcag/PXfT+jlPP1uyFVk3v3byNpOOR
// SIG // j7I5LFGc6XBpDco2LXCOMcg1KL3jtIckw+DJj361VI/c
// SIG // +gVVmG1oO5pGve2krnopN6zL64NF50ZuyjLVwIYwXE8s
// SIG // 4mKyzbnijYjklqwBSru+cakXW2dg3viSkR4dPf0gz3N9
// SIG // QZpGdc3EXzTdEonW/aUgfX782Z5F37ZyL9t9X4C626p+
// SIG // Nuw2TPYrbqgSUei/BQOj0XOmTTd0lBw0gg/wEPK3Rxjt
// SIG // p+iZfD9M269ewvPV2HM9Q07BMzlMjgK8QmguEOqEUUbi
// SIG // 0b1qGFphAXPKZ6Je1yh2AuIzGHLXpyDwwvoSCtdjbwzJ
// SIG // NmSLW6CmgyFdXzB0kZSU2LlQ+QuJYfM2BjUYhEfb3BvR
// SIG // /bLUHMVr9lxSUV0S2yW6r1AFemzFER1y7435UsSFF5PA
// SIG // PBXbGjfHCBUYP3irRbb1Hode2o+eFnJpxq57t7c+auIu
// SIG // rQIDAQABo4IB3TCCAdkwEgYJKwYBBAGCNxUBBAUCAwEA
// SIG // ATAjBgkrBgEEAYI3FQIEFgQUKqdS/mTEmr6CkTxGNSnP
// SIG // EP8vBO4wHQYDVR0OBBYEFJ+nFV0AXmJdg/Tl0mWnG1M1
// SIG // GelyMFwGA1UdIARVMFMwUQYMKwYBBAGCN0yDfQEBMEEw
// SIG // PwYIKwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0
// SIG // LmNvbS9wa2lvcHMvRG9jcy9SZXBvc2l0b3J5Lmh0bTAT
// SIG // BgNVHSUEDDAKBggrBgEFBQcDCDAZBgkrBgEEAYI3FAIE
// SIG // DB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0T
// SIG // AQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV9lbLj+iiXGJo
// SIG // 0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRw
// SIG // Oi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9k
// SIG // dWN0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcmww
// SIG // WgYIKwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRw
// SIG // Oi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01p
// SIG // Y1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNydDANBgkqhkiG
// SIG // 9w0BAQsFAAOCAgEAnVV9/Cqt4SwfZwExJFvhnnJL/Klv
// SIG // 6lwUtj5OR2R4sQaTlz0xM7U518JxNj/aZGx80HU5bbsP
// SIG // MeTCj/ts0aGUGCLu6WZnOlNN3Zi6th542DYunKmCVgAD
// SIG // sAW+iehp4LoJ7nvfam++Kctu2D9IdQHZGN5tggz1bSNU
// SIG // 5HhTdSRXud2f8449xvNo32X2pFaq95W2KFUn0CS9QKC/
// SIG // GbYSEhFdPSfgQJY4rPf5KYnDvBewVIVCs/wMnosZiefw
// SIG // C2qBwoEZQhlSdYo2wh3DYXMuLGt7bj8sCXgU6ZGyqVvf
// SIG // SaN0DLzskYDSPeZKPmY7T7uG+jIa2Zb0j/aRAfbOxnT9
// SIG // 9kxybxCrdTDFNLB62FD+CljdQDzHVG2dY3RILLFORy3B
// SIG // FARxv2T5JL5zbcqOCb2zAVdJVGTZc9d/HltEAY5aGZFr
// SIG // DZ+kKNxnGSgkujhLmm77IVRrakURR6nxt67I6IleT53S
// SIG // 0Ex2tVdUCbFpAUR+fKFhbHP+CrvsQWY9af3LwUFJfn6T
// SIG // vsv4O+S3Fb+0zj6lMVGEvL8CwYKiexcdFYmNcP7ntdAo
// SIG // GokLjzbaukz5m/8K6TT4JDVnK+ANuOaMmdbhIurwJ0I9
// SIG // JZTmdHRbatGePu1+oDEzfbzL6Xu/OHBE0ZDxyKs6ijoI
// SIG // Yn/ZcGNTTY3ugm2lBRDBcQZqELQdVTNYs6FwZvKhggLX
// SIG // MIICQAIBATCCAQChgdikgdUwgdIxCzAJBgNVBAYTAlVT
// SIG // MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
// SIG // ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5k
// SIG // IE9wZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UECxMdVGhh
// SIG // bGVzIFRTUyBFU046RDA4Mi00QkZELUVFQkExJTAjBgNV
// SIG // BAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2Wi
// SIG // IwoBATAHBgUrDgMCGgMVAHajR3tdd4AifO2mSBmuUAVK
// SIG // iMLyoIGDMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNV
// SIG // BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx
// SIG // HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEm
// SIG // MCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENB
// SIG // IDIwMTAwDQYJKoZIhvcNAQEFBQACBQDoKzaqMCIYDzIw
// SIG // MjMwNjA4MDEwMjM0WhgPMjAyMzA2MDkwMTAyMzRaMHcw
// SIG // PQYKKwYBBAGEWQoEATEvMC0wCgIFAOgrNqoCAQAwCgIB
// SIG // AAICBZsCAf8wBwIBAAICEeIwCgIFAOgsiCoCAQAwNgYK
// SIG // KwYBBAGEWQoEAjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgC
// SIG // AQACAwehIKEKMAgCAQACAwGGoDANBgkqhkiG9w0BAQUF
// SIG // AAOBgQAy3mnDQKm0ygeuFKYV8S5rUMSxM7Ua38xpo564
// SIG // PdyhE+zygyNoOCZWrvorW05yxH+qwu5Btf2Fj74tip60
// SIG // kl7FuKNI5jaMUh+fhBd/0yBdWMz92gVp7Q4EmOsC8o6Q
// SIG // 8aWGISdyiAF47/oyK0LUbTuNQCnRHAtTm5uG9sHyv07g
// SIG // JDGCBA0wggQJAgEBMIGTMHwxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1w
// SIG // IFBDQSAyMDEwAhMzAAABuh8/GffBdb18AAEAAAG6MA0G
// SIG // CWCGSAFlAwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYL
// SIG // KoZIhvcNAQkQAQQwLwYJKoZIhvcNAQkEMSIEIPyI2tfM
// SIG // Sjy3XiQCNsGBQjGRU8limU0ri8qa83SRBin3MIH6Bgsq
// SIG // hkiG9w0BCRACLzGB6jCB5zCB5DCBvQQgKVW9PDNucPrW
// SIG // BlrJpRradYMtZz3Kln6oDBd55VmFcwUwgZgwgYCkfjB8
// SIG // MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
// SIG // bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWlj
// SIG // cm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNy
// SIG // b3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAbof
// SIG // Pxn3wXW9fAABAAABujAiBCCQFKe2mJOW3EXU0gS05ZA4
// SIG // EObBQBnzumRjG8nzb4GJqzANBgkqhkiG9w0BAQsFAASC
// SIG // AgBgMgdz3a3xeV+N3EwtT3ik3pf9kcJFu4OdtExRfwHj
// SIG // j89b8+CUPMqwouK2JTl8Ye2D09Ock2ORlqzTiT/XhtN6
// SIG // 1h4JxRH3NQel1oybIJ6EqwVYyjyuCtR80GwDzBIlXlJb
// SIG // 1dSj+KTpj9uycdjkx0t4g0D1N818xPLqUY4oMr8E+/ph
// SIG // dAhwK/pbBlUr7BK+NFtM/FTuw+QAqEhuWc+Cgpof0XBK
// SIG // 2g27wp6neSjNEw7E88kgPfpwkfGKHt182xAWaEDdQFxs
// SIG // EbWoUHG2mCrqHAOamMhS1rAJeekq3FZfDrxYo/IFB6Tf
// SIG // 4KwUYEVLmoVMYvO0RY9d85aYGSYOag7e28upGzUnD+ag
// SIG // pknH8n/7/FXLCJzPRv83dbm7O4lhN8VcVJERuJkjsZds
// SIG // /76ntEGAyc+vooEzbeJOuqSjn0HmVmz4/bTbWMFj4Nqc
// SIG // OPjdRaQWJy4XPKHIDZaK+/CGNCcbjVs/uRfLyg3lewSg
// SIG // ANnpV43pQNt81raeTYG3HU4OnsnFhlMrpWn5anNgaqPK
// SIG // 6xUfEsmwRQnEjFFu+nvCfNQOKypuXC2UjuYlUcVflI1a
// SIG // kzzMne8HxGiZQm0OwPpzuGqY5llxcv4KURIiogerFDmV
// SIG // qw7d1721NF4xAbuvaEsBpRABR2m7RZ24fRwRzHIckxIr
// SIG // x2QKcJlyGhUMuI7JuUHQb+mKpA==
// SIG // End signature block
