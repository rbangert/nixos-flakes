# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "usbhid" "sd_mod" "rtsx_pci_sdmmc" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  boot = {
        #cleanOnBoot = true;
      loader = {
      systemd-boot.enable = true;
      systemd-boot.editor = false;
      timeout = 0;
          efi ={
              efiSysMountPoint = "/boot/efi";
              canTouchEfiVariables = true;
          };
      };
  };

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/387271e5-2e20-4b47-ab14-f1c20323ed51";
      fsType = "ext4";
    };

  fileSystems."/boot/efi" =
    { device = "/dev/disk/by-uuid/1129-31A8";
      fsType = "vfat";
    };

  swapDevices = [ ];

  # Enables  on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.use`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlan0.usedhcp = lib.mkDefault true;
  # networking.interfaces.enp0s31f6.usedhcpcd = lib.mkDefault true;
  # networking.interfaces.tailscale0.use = lib.mkDefault true;
  # networking.interfaces.wlp2s0.use = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "performance";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
